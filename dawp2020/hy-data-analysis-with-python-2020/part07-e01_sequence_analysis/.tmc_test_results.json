[{"name": "test.test_sequence_analysis.EquilibriumDistribution.test_convergence", "status": "failed", "message": "\nNot equal to tolerance rtol=1e-07, atol=0.1\nFirst distribution did not seem to converge that strongly.\nMismatched elements: 3 / 4 (75%)\nMax absolute difference: 0.57153303\nMax relative difference: 1.62014424\n x: array([-0.297262,  0.440676, -0.132776, -0.081913])\n y: array([-0.476861,  0.46101 ,  0.214105,  0.48962 ])", "passed": false, "points": ["p07-01.22"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 1052, in test_convergence\n    assert_allclose(res[0][1][-1][1], equilibrium_distribution, atol=0.1,\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\site-packages\\numpy\\testing\\_private\\utils.py\", line 1527, in assert_allclose\n    assert_array_compare(compare, actual, desired, err_msg=str(err_msg),\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\site-packages\\numpy\\testing\\_private\\utils.py\", line 840, in assert_array_compare\n    raise AssertionError(msg)\n"]}, {"name": "test.test_sequence_analysis.EquilibriumDistribution.test_eqd_correctness", "status": "failed", "message": "2 != 1 : There should be only one stationary distribution.", "passed": false, "points": ["p07-01.22"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 1035, in test_eqd_correctness\n    self.assertEqual(len(stationary_distributions), 1, msg=\"There should be only one stationary distribution.\")\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 912, in assertEqual\n    assertion_func(first, second, msg=msg)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 905, in _baseAssertEqual\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.StationaryDistribution.test_first", "status": "failed", "message": "\nNot equal to tolerance rtol=1e-07, atol=0.0001\n\nMismatched elements: 4 / 4 (100%)\nMax absolute difference: 0.88940952\nMax relative difference: 1.33411427\n x: array([ 0.042164,  0.035189, -0.222743, -0.335664])\n y: array([0.333333, 0.      , 0.666667, 0.      ])", "passed": false, "points": ["p07-01.20"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 1008, in test_first\n    assert_allclose(distributions[0], [0.33333333, 0., 0.66666667,  0], atol=1e-04)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\site-packages\\numpy\\testing\\_private\\utils.py\", line 1527, in assert_allclose\n    assert_array_compare(compare, actual, desired, err_msg=str(err_msg),\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\site-packages\\numpy\\testing\\_private\\utils.py\", line 840, in assert_array_compare\n    raise AssertionError(msg)\n"]}, {"name": "test.test_sequence_analysis.StationaryInitialDistribution.test_correctness", "status": "failed", "message": "0.07929059467947153 not greater than 0.49791896166458594 : divergences should converge towards 0.", "passed": false, "points": ["p07-01.21"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 1023, in test_correctness\n    self.assertGreater(results[i-1][1], results[i][1], msg=\"divergences should converge towards 0.\")\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 1310, in assertGreater\n    self.fail(self._formatMessage(msg, standardMsg))\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 753, in fail\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestCodonToProb.test_content", "status": "passed", "message": "", "passed": true, "points": ["p07-01.5"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestCodonToProb.test_size", "status": "passed", "message": "", "passed": true, "points": ["p07-01.5"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestContextList.test_first", "status": "passed", "message": "", "passed": true, "points": ["p07-01.10"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestContextList.test_random", "status": "passed", "message": "", "passed": true, "points": ["p07-01.10"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestContextProbabilities.test_empty_context", "status": "errored", "message": "unsupported operand type(s) for -: 'dict' and 'dict'", "passed": false, "points": ["p07-01.11"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 624, in test_empty_context\n    self.assertAlmostEqual(d[\"\"], c, places=3)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 943, in assertAlmostEqual\n    diff = abs(first - second)\n"]}, {"name": "test.test_sequence_analysis.TestContextProbabilities.test_first", "status": "passed", "message": "", "passed": true, "points": ["p07-01.11"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestContextProbabilities.test_random", "status": "passed", "message": "", "passed": true, "points": ["p07-01.11"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestDict.test_content", "status": "passed", "message": "", "passed": true, "points": ["p07-01.2"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestDict.test_size", "status": "passed", "message": "", "passed": true, "points": ["p07-01.2"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestDictList.test_content", "status": "passed", "message": "", "passed": true, "points": ["p07-01.3"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestDictList.test_size", "status": "passed", "message": "", "passed": true, "points": ["p07-01.3"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestDnaToProt.test_empty", "status": "passed", "message": "", "passed": true, "points": ["p07-01.4"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestDnaToProt.test_first", "status": "passed", "message": "", "passed": true, "points": ["p07-01.4"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestDnaToRna.test_dna_to_rna", "status": "passed", "message": "", "passed": true, "points": ["p07-01.1"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestDnaToRna.test_dna_to_rna_empty", "status": "passed", "message": "", "passed": true, "points": ["p07-01.1"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestGenerateMarkov.test_content", "status": "errored", "message": "name 'kth' is not defined", "passed": false, "points": ["p07-01.12"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 653, in test_content\n    s = mc.generate(n)\n", "  File \"<string>\", line 15, in generate\n"]}, {"name": "test.test_sequence_analysis.TestGenerateMarkov.test_deterministic", "status": "errored", "message": "name 'kth' is not defined", "passed": false, "points": ["p07-01.12"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 663, in test_deterministic\n    s1 = mc.generate(n, seed)\n", "  File \"<string>\", line 15, in generate\n"]}, {"name": "test.test_sequence_analysis.TestGenerateMarkov.test_length", "status": "errored", "message": "name 'kth' is not defined", "passed": false, "points": ["p07-01.12"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 644, in test_length\n    s = mc.generate(n)\n", "  File \"<string>\", line 15, in generate\n"]}, {"name": "test.test_sequence_analysis.TestGenerateMarkov.test_parameter_usage", "status": "errored", "message": "name 'kth' is not defined", "passed": false, "points": ["p07-01.12"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 675, in test_parameter_usage\n    self.assertEqual(mc.generate(20), \"A\"*20,\n", "  File \"<string>\", line 15, in generate\n"]}, {"name": "test.test_sequence_analysis.TestKmerIndex.test_first", "status": "failed", "message": "0 != 22", "passed": false, "points": ["p07-01.18"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 972, in test_first\n    self.assertEqual(len(positions), n - k + 1)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 912, in assertEqual\n    assertion_func(first, second, msg=msg)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 905, in _baseAssertEqual\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestKullbackLeibler.test_exception", "status": "failed", "message": "ZeroDivisionError not raised by kullback_leibler", "passed": false, "points": ["p07-01.19"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 992, in test_exception\n    self.assertRaises(ZeroDivisionError, kullback_leibler, q, p)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 816, in assertRaises\n    return context.handle('assertRaises', args, kwargs)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 202, in handle\n    callable_obj(*args, **kwargs)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 224, in __exit__\n    self._raiseFailure(\"{} not raised by {}\".format(exc_name,\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 164, in _raiseFailure\n    raise self.test_case.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestKullbackLeibler.test_first", "status": "failed", "message": "nan != 0.0 within 3 places (nan difference)", "passed": false, "points": ["p07-01.19"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 982, in test_first\n    self.assertAlmostEqual(kullback_leibler(p, p), 0.0, places=3)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 966, in assertAlmostEqual\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestKullbackLeibler.test_second", "status": "failed", "message": "nan != 2.0 within 3 places (nan difference)", "passed": false, "points": ["p07-01.19"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 987, in test_second\n    self.assertAlmostEqual(kullback_leibler(p, q), 2.0, places=3)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 966, in assertAlmostEqual\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestKullbackLeibler.test_single", "status": "failed", "message": "nan != 0.0 within 3 places (nan difference)", "passed": false, "points": ["p07-01.19"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 996, in test_single\n    self.assertAlmostEqual(kullback_leibler(p, p), 0.0, places=3)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 966, in assertAlmostEqual\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestLowSpaceRequirement.test_first", "status": "failed", "message": "1 != 16", "passed": false, "points": ["p07-01.16"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 860, in test_first\n    self.assertEqual(len(d), 16)      # Number of 2-mers\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 912, in assertEqual\n    assertion_func(first, second, msg=msg)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 905, in _baseAssertEqual\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestMarkovChainLogProbability.test_first", "status": "failed", "message": "nan != -31.71783 within 5 places (nan difference)", "passed": false, "points": ["p07-01.15"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 831, in test_first\n    self.assertAlmostEqual(prob, -3.171783e+01, places=5)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 966, in assertAlmostEqual\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestMarkovChainLogProbability.test_random", "status": "failed", "message": "nan not less than or equal to 0.0", "passed": false, "points": ["p07-01.15"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 838, in test_random\n    self.assertLessEqual(prob, 0.0)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 1304, in assertLessEqual\n    self.fail(self._formatMessage(msg, standardMsg))\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 753, in fail\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestMarkovChainLogProbability.test_uniform", "status": "failed", "message": "nan != -8 within 7 places (nan difference)", "passed": false, "points": ["p07-01.15"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 850, in test_uniform\n    self.assertAlmostEqual(mc.log_probability(\"\".join(kmer)), -2*n)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 966, in assertAlmostEqual\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestMarkovChainProbability.test_first", "status": "failed", "message": "nan != 2.83127e-10 within 10 places (nan difference)", "passed": false, "points": ["p07-01.14"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 804, in test_first\n    self.assertAlmostEqual(prob, 2.831270e-10, places=10)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 966, in assertAlmostEqual\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestMarkovChainProbability.test_length_one", "status": "failed", "message": "nan != 0.32 within 10 places (nan difference) : Incorrect probability for sequence 'A'!", "passed": false, "points": ["p07-01.14"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 792, in test_length_one\n    self.assertAlmostEqual(mc.probability(\"A\"), 0.32, places=10,\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 966, in assertAlmostEqual\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestMarkovChainProbability.test_random", "status": "failed", "message": "nan not greater than 0.0", "passed": false, "points": ["p07-01.14"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 811, in test_random\n    self.assertGreater(prob, 0.0)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 1310, in assertGreater\n    self.fail(self._formatMessage(msg, standardMsg))\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 753, in fail\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestMarkovChainProbability.test_uniform", "status": "failed", "message": "nan != 0.00390625 within 7 places (nan difference)", "passed": false, "points": ["p07-01.14"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 822, in test_uniform\n    self.assertAlmostEqual(mp.probability(\"\".join(kmer)), 0.25**4)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 966, in assertAlmostEqual\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestProteinToMaxRNA.test_empty", "status": "passed", "message": "", "passed": true, "points": ["p07-01.6"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestProteinToMaxRNA.test_first", "status": "passed", "message": "", "passed": true, "points": ["p07-01.6"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestProteinToMaxRNA.test_second", "status": "passed", "message": "", "passed": true, "points": ["p07-01.6"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestProteinToRandomRNA.test_first", "status": "passed", "message": "", "passed": true, "points": ["p07-01.8"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestProteinToRandomRNA.test_random", "status": "passed", "message": "", "passed": true, "points": ["p07-01.8"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestPseudoCounts.test_generation", "status": "errored", "message": "name 'kth' is not defined", "passed": false, "points": ["p07-01.13"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 776, in test_generation\n    self.assertEqual(len(mc.generate(20)), 20,\n", "  File \"<string>\", line 15, in generate\n"]}, {"name": "test.test_sequence_analysis.TestPseudoCounts.test_order_0", "status": "failed", "message": "Items in the second set but not the first:\n'C'\n'A'\n'G'\n'T' : There should be exactly one probability for each of the four nucleotides!", "passed": false, "points": ["p07-01.13"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 689, in test_order_0\n    self.assertEqual(set(d), set([\"A\", \"C\", \"G\", \"T\"]),\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 912, in assertEqual\n    assertion_func(first, second, msg=msg)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 1172, in assertSetEqual\n    self.fail(self._formatMessage(msg, standardMsg))\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 753, in fail\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestPseudoCounts.test_order_2", "status": "failed", "message": "1 != 16", "passed": false, "points": ["p07-01.13"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 700, in test_order_2\n    self.assertEqual(len(d), 16)      # Number of 2-mers\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 912, in assertEqual\n    assertion_func(first, second, msg=msg)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 905, in _baseAssertEqual\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestRandomEvent.test_first", "status": "passed", "message": "", "passed": true, "points": ["p07-01.7"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestRandomEvent.test_probs", "status": "passed", "message": "", "passed": true, "points": ["p07-01.7"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestRandomEvent.test_second", "status": "passed", "message": "", "passed": true, "points": ["p07-01.7"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestSampleFromConcatenation.test_deterministic", "status": "passed", "message": "", "passed": true, "points": ["p07-01.17"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestSampleFromConcatenation.test_length_one", "status": "passed", "message": "", "passed": true, "points": ["p07-01.17"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestSampleFromConcatenation.test_second", "status": "failed", "message": "False is not true : The generated string Q contains non-nucleotide characters!", "passed": false, "points": ["p07-01.17"], "backtrace": ["  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 60, in testPartExecutor\n    yield\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 633, in _callTestMethod\n    method()\n", "  File \"C:\\Users\\haste\\OneDrive\\Desktop\\data-analysis-course\\dawp2020\\hy-data-analysis-with-python-2020\\part07-e01_sequence_analysis\\test\\test_sequence_analysis.py\", line 958, in test_second\n    self.assertTrue(TestSlidingWindow.is_subset(s2, \"ACGT\"), msg=\"The generated string %s contains non-nucleotide characters!\" % s2)\n", "  File \"C:\\Users\\haste\\anaconda3\\lib\\unittest\\case.py\", line 765, in assertTrue\n    raise self.failureException(msg)\n"]}, {"name": "test.test_sequence_analysis.TestSlidingWindow.test_first", "status": "passed", "message": "", "passed": true, "points": ["p07-01.9"], "backtrace": []}, {"name": "test.test_sequence_analysis.TestSlidingWindow.test_random", "status": "passed", "message": "", "passed": true, "points": ["p07-01.9"], "backtrace": []}]